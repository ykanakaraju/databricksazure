
 Lab 5 - Securing secrets using Secret Scope in Azure Key Vault
 ---------------------------------------------------------------
   
 1. Login to Azure Portal, search for 'Key vaults' and open it.
 
 2. Click on 'Create Key vault' button and create a Key vault as follows:
 
	Subscription: <your subscription>
	Resource group: cts-demo-rg
	Key vault name: cts-demo-key-vault
	-> Next
	Permission model: Vault access policy
	-> Review + create
	-> create
	
 3. Wait until the deployment is complete
    Click on 'Go to resource' button to go to the Key vault resource page
	
 4. Click on 'Secrets' menu option (under objects)
    Click on '+ Generate/Import' to create a secret in the vault.
	
 5. Create a secret as follows:
	
	Upload options: Manual
	Name: cts-demo-sa-access-key
	Value: <access-key-value> (used in ADLS-using-Access-Keys.dbc)
	Content type (optional): CTS Demo Storage Account Access Key
	
	-> Create
	
 6. Make a note of the required info about your vault
	
	6.1 Open the Key vault resource page and click on 'Properties' menu option
	6.2 Make a note of the following:
		
		Vault URI: <Vault-URI>
		Resource ID: <Resource-ID>
	
 7. Create a Databricks secret scope and link it to Azure key vault
 
	7.1 Navigate to Databricks UI home page (Click on 'Microsoft Azure' link @ top-left)
	7.2 Add "secrets/createScope" at the end of the URL to open 'Create Secret Scope' page	
		Your URL looks like the following:
		https://adb-xxx.10.azuredatabricks.net/?o=xxx#secrets/createScope
	7.3 Create as follows:
		Scope Name: cts-demo-scope
		Manage Principal: All Users
		DNS Name: <Vault-URI> (saved from step 6)
		Resource ID: <Resource-ID> (saved from step 6)
	7.4 Click on 'Create' button
	
	You can Access secrets from the Key vault using the scope created above using dbutils.secrets utility
 
		dbutils.secrets.help()
		dbutils.secrets.listScopes()
		dbutils.secrets.list(scope = 'cts-demo-scope')
		dbutils.secrets.get(scope = 'cts-demo-scope', key = 'cts-demo-sa-access-key')
	
	
 8. Refactor the code in the notebooks created in Lab-9 to replace the hard-coded secret values.
	
	8.1 Refer to the following notebooks for refactored code.
	
			ADLS-using-Access-Keys-Secret-Vault.dbc
			ADLS-using-SAS-token-Secret-Vault.dbc
			ADLS-using-Service-Principal-Secret-Vault.dbc
	
	
	
	
	
	
	
	
	
	